go.property("enable_bloom", true)
go.property("bloom_radius", 26.56)
go.property("bloom_intensity", 0.30)
go.property("bloom_threshold", 0.72)

go.property("enable_chromatic_aberration", true)
go.property("chromatic_strength", 0.64)

go.property("enable_vignette", true)
go.property("vignette_strength", 0.3)
go.property("vignette_intensity", 0.87)

go.property("enable_noise", true)
go.property("noise_strength", 0.17)

go.property("enable_vhs_distortion", true)
go.property("distortion_strength", 0.10)

go.property("enable_scanlines", true)
go.property("scanlines_strength", 0.10)

go.property("enable_crt", true)
go.property("crt_curve", 1.0)

local BLOOM = hash("bloom")
local CHROMATIC_ABERRATION = hash("chromatic_aberration")
local VIGNETTE = hash("vignette")
local NOISE = hash("noise")
local VHS = hash("vhs")
local SCANLINES = hash("scanlines")
local CRT = hash("crt")

function init(self)
	self.time = 0

	go.set("#quad", "enable_effects1", vmath.vector4(
		self.enable_bloom and 1 or 0,
		self.enable_chromatic_aberration and 1 or 0,
		self.enable_vignette and 1 or 0,
		self.enable_noise and 1 or 0))

	go.set("#quad", "enable_effects2", vmath.vector4(
		self.enable_vhs_distortion and 1 or 0,
		self.enable_scanlines and 1 or 0,
		self.enable_crt and 1 or 0, 0))

	go.set("#quad", "effects1", vmath.vector4(self.bloom_radius, self.bloom_intensity, self.bloom_threshold, self.chromatic_strength))
	go.set("#quad", "effects2", vmath.vector4(self.vignette_strength, self.vignette_intensity, self.noise_strength, self.distortion_strength))
	go.set("#quad", "effects3", vmath.vector4(self.scanlines_strength, self.crt_curve, self.crt_curve, 0))
end

function update(self, dt)
	self.time = self.time + dt
	go.set("#quad", "enable_effects2.w", self.time)
end

function on_message(self, message_id, message, sender)
	if message_id == BLOOM then
		if message.enable ~= nil then
			self.enable_bloom = message.enable
			go.set("#quad", "enable_effects1.x", self.enable_bloom and 1 or 0)
		end
		
		if message.radius then self.bloom_radius = message.radius end
		if message.intensity then self.bloom_intensity = message.intensity end
		if message.threshold then self.bloom_threshold = message.threshold end

		go.set("#quad", "effects1", vmath.vector4(self.bloom_radius, self.bloom_intensity, self.bloom_threshold, self.chromatic_strength))
	elseif message_id == CHROMATIC_ABERRATION then
		if message.enable ~= nil then
			self.enable_chromatic_aberration = message.enable
			go.set("#quad", "enable_effects1.y", self.enable_chromatic_aberration and 1 or 0)
		end
		
		if message.strength then
			self.chromatic_strength = message.strength
			go.set("#quad", "effects1.w", self.chromatic_strength)
		end
	elseif message_id == VIGNETTE then
		if message.enable ~= nil then
			self.enable_vignette = message.enable
			go.set("#quad", "enable_effects1.z", self.enable_vignette and 1 or 0)
		end
		
		if message.strength then self.vignette_strength = message.strength end
		if message.intensity then self.vignette_intensity = message.intensity end
		go.set("#quad", "effects2", vmath.vector4(self.vignette_strength, self.vignette_intensity, self.noise_strength, self.distortion_strength))
	elseif message_id == NOISE then
		if message.enable ~= nil then
			self.enable_noise = message.enable
			go.set("#quad", "enable_effects1.w", self.enable_noise and 1 or 0)
		end
		if message.strength then
			self.noise_strength = message.strength
			go.set("#quad", "effects2.z", self.noise_strength )
		end
	elseif message_id == VHS then
		if message.enable ~= nil then
			self.enable_vhs_distortion = message.enable
			go.set("#quad", "enable_effects2.x", self.enable_vhs_distortion and 1 or 0)
		end
		
		if message.strength then
			self.distortion_strength = message.strength
			go.set("#quad", "effects2.w", self.distortion_strength)
		end
	elseif message_id == SCANLINES then
		if message.enable ~= nil then
			self.enable_scanlines = message.enable
			go.set("#quad", "enable_effects2.y", self.enable_scanlines and 1 or 0)
		end
		
		if message.strength then
			self.scanlines_strength = message.strength
			go.set("#quad", "effects3.x", self.scanlines_strength )
		end
	elseif message_id == CRT then
		if message.enable ~= nil then
			self.enable_crt = message.enable
			go.set("#quad", "enable_effects2.z", self.enable_crt and 1 or 0)
			
		end
		
		if message.curve then
			self.crt_curve = message.curve
			go.set("#quad", "effects3.y", self.crt_curve)
		end
	end
end
